import { BoundaryPoint, AnalysisType } from '../types';

/**
 * This service simulates a streaming analysis from a backend.
 * It returns a pre-defined report word-by-word to demonstrate
 * the streaming UI without requiring a real backend server.
 */
export async function* analyzeImageOnBackend(
  analysisType: AnalysisType,
  imageFile: File,
  boundaryPoints: BoundaryPoint[]
): AsyncGenerator<string> {
  
  // Simulate a network delay for the initial connection
  await new Promise(resolve => setTimeout(resolve, 500));

  const sampleReport = `
### ${analysisType} Analysis Report (Simulated)

**Image:** ${imageFile.name}
**Area:** Defined by ${boundaryPoints.length} boundary point(s).

---

### Key Findings
- **Vegetation Index (${analysisType}):** The analysis indicates varied vegetation health across the specified region. The eastern part shows higher-than-average vegetation density, while a small patch in the southwest appears to have lower values, potentially indicating stress or sparse coverage.
- **Water Bodies:** Several small water bodies were detected. The NDWI analysis highlights these areas with high surface moisture content, which appear clearly distinct from the surrounding land.
- **Anomalies:** One area in the upper-quadrant shows signs of stress according to the NDVI values, which could warrant a ground-level inspection for potential issues like disease or lack of irrigation.

### Recommendations
1. **Field Visit:** A field visit to the identified anomalous zone in the southwest is recommended to determine the cause of low vegetation values.
2. **Monitor Changes:** Continue to monitor this area over the next few weeks using subsequent satellite passes to track changes in vegetation health.
3. **Data Correlation:** Correlate these findings with historical weather patterns and ground-truth data for higher accuracy and more robust conclusions.

**Note:** This is a simulated analysis report. In a real application, this would be generated by a backend service using Google Earth Engine or a similar geospatial processing tool.
  `;

  // Split the report into words to simulate streaming
  const words = sampleReport.split(/(\s+)/);

  for (const word of words) {
    yield word;
    // Add a small delay between each word to make the streaming visible
    await new Promise(resolve => setTimeout(resolve, 30));
  }
};
